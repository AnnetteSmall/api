// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package main

import (
	"net/http"
	"sync"
)

var (
	lockHttpClientMockGet sync.RWMutex
)

// HttpClientMock is a mock implementation of HttpClient.
//
//     func TestSomethingThatUsesHttpClient(t *testing.T) {
//
//         // make and configure a mocked HttpClient
//         mockedHttpClient := &HttpClientMock{
//             GetFunc: func(in1 string) (*http.Response, error) {
// 	               panic("TODO: mock out the Get method")
//             },
//         }
//
//         // TODO: use mockedHttpClient in code that requires HttpClient
//         //       and then make assertions.
//
//     }

type HttpClientMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(in1 string) (*http.Response, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// In1 is the in1 argument value.
			In1 string
		}
	}
}

// Get calls GetFunc.
func (mock *HttpClientMock) Get(in1 string) (*http.Response, error) {
	if mock.GetFunc == nil {
		panic("moq: HttpClientMock.GetFunc is nil but HttpClient.Get was just called")
	}
	callInfo := struct {
		In1 string
	}{
		In1: in1,
	}
	lockHttpClientMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockHttpClientMockGet.Unlock()
	return mock.GetFunc(in1)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedHttpClient.GetCalls())
func (mock *HttpClientMock) GetCalls() []struct {
	In1 string
} {
	var calls []struct {
		In1 string
	}
	lockHttpClientMockGet.RLock()
	calls = mock.calls.Get
	lockHttpClientMockGet.RUnlock()
	return calls
}
